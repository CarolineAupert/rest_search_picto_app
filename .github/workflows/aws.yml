# This workflow will build and push a new container image to Amazon Beanstalk.

name: Deploy to Amazon Beanstalk (CD)
    
on:
  workflow_run:
    workflows: ["Maven Continuous Integration (CI)"]
    # Execute the workflow once the CI workflow is completed on main branch.
    types: [completed]
    branches:
      - main

env:
  AWS_REGION: eu-west-3                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: caukaro           # set this to your Amazon ECR repository name
  AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }} # The bucket to deploy the app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
        
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Cache the Maven packages to speed up build
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2     

    - name: Build project with Maven
      run: mvn -B package --file pom.xml
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

#	TODO : manage version id
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
		
    - name: Fill in the new image ID in the Amazon dockerrun file
       id: dockerrun-setup
       uses: danielr1996/envsubst-action@1.0.0
	   env:
		IMAGE_NAME: ${{ steps.build-image.outputs.image }}
       with:
		input: .aws/Dockerrun.template.json
		output: Dockerrun.aws.json
	
	- name: Upload file to S3 bucket
       run: aws s3 cp Dockerrun.aws.json s3://${{ env.AWS_S3_BUCKET }}

#	TODO generate deploy
	
        
#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@v1
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION }}
#         container-name: ${{ env.CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#        service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#        wait-for-service-stability: true
